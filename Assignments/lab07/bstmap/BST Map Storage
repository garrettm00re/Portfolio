package bstmap;
import Map61B;
public class BSTMap<K, V> implements Map61B<K,V> {
    private BSTMap<V> left;
    private BSTMap<V> right;
    private V item;
    private K key;
    private int size;

    BSTMap<V>(K key, V item) {
        left = null;
        right = null;
        key = key;
        item = item;
    }
    public V remove(K key) {
        throw new UnsupportedOperationException();
    }
    void clear();

    /* Returns true if this map contains a mapping for the specified key. */
    boolean containsKey(K kee) {
        return containsHelper(kee);
    }
    private boolean containsHelper(K key) {
        if (this == null) {
            return false;
        }
        return get(key) != null;
    }

    /* Returns the value to which the specified key is mapped, or null if this
     * map contains no mapping for the key.
     */
    public V get(K key) {
        return getHelper(key);
    }
    private V getHelper(K k) {
        if (b == null) {
            return null;
        } else if (key > k) {
            left.getHelper(k);
        } else if (b.key < key) {
            right.getHelper(k);
        } else {
            return item;
        }
    }

    /* Returns the number of key-value mappings in this map. */
    public int size() {
        return size;
    }

    /* Associates the specified value with the specified key in this map. */
    void put(K key, V value) {
        return putHelper(key, value);
    }
    private void putHelper(K k, V v) {
        if (this == null) {
            size++;
            return new BSTMap<K, V>(k, v);
        } else if (k > key) {
            right = right.putHelper(k, v);
        } else if (k < key) {
            left = left.putHelper(k, v);
        } else {
            key = k;
        }
    }

    /* Returns a Set view of the keys contained in this map. Not required for Lab 7.
     * If you don't implement this, throw an UnsupportedOperationException. */
    Set<K> keySet() {
        throw new UnsupportedOperationException();
    }

    /* Removes the mapping for the specified key from this map if present.
     * Not required for Lab 7. If you don't implement this, throw an
     * UnsupportedOperationException. */
    V remove(K key) {
        throw new UnsupportedOperationException();
    }

    /* Removes the entry for the specified key only if it is currently mapped to
     * the specified value. Not required for Lab 7. If you don't implement this,
     * throw an UnsupportedOperationException.*/
    V remove(K key, V value) {
        throw new UnsupportedOperationException();
    }
}
